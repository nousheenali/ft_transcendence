generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =====================================================================
model User {
  id        String   @id @default(uuid())
  login     String   @unique
  email     String   @unique
  name      String   @unique
  avatar    String?  @default("https://i.imgur.com/6VBx3io.png")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isOnline  Boolean  @default(true)

  // Two factor authentication-----------------------------------------
  TFAEnabled Boolean @default(false)
  TFAKey     String?

  // Relation to notifications-----------------------------------------
  receiverdNotification Notification[] @relation(name: "receiver")
  sentNotification      Notification[] @relation(name: "sender")

  // Relation to friends-----------------------------------------------
  userToFriend FriendRelation[] @relation(name: "UserToFriendRelations")
  friendToUser FriendRelation[] @relation(name: "FriendToUserRelations")

  // Channel Relations-------------------------------------------------
  channelRelation ChannelRelation[]
  channels        Channel[]         @relation("createdChannels")

  // Messages Relations-------------------------------------------------
  sentMessages     Messages[] @relation(name: "sentMessages")
  recievedMessages Messages[] @relation(name: "recievedMessages")

  // Game Relations-----------------------------------------------------
  games     Game[] @relation(name: "userGames")
  opponents Game[] @relation(name: "opponentGames")
  losses    Int    @default(0)
  wins      Int    @default(0)
  score     Int    @default(0)
}

// =====================================================================

model Game {
  id         String     @id @default(uuid())
  gameStatus GameStatus @default(QUEUED)
  startTime  DateTime   @default(now())

  winnerId String?

  User   User   @relation("userGames", fields: [userId], references: [id])
  userId String

  opponent   User   @relation("opponentGames", fields: [opponentId], references: [id])
  opponentId String
}

enum GameStatus {
  LIVE
  QUEUED
  FINISHED
}

// =====================================================================

model Notification {
  id        String   @id @default(uuid())
  content   Content
  recivedAt DateTime @default(now())
  read      Boolean  @default(false)

  sender   User   @relation("sender", fields: [senderId], references: [id])
  senderId String
  User     User   @relation("receiver", fields: [userId], references: [id])
  userId   String
}

enum Content {
  DirectMessage_Recieved
  ChannelInvite_Recieved
  GameInvite_Recieved
  FriendRequest_Recieved
}

// =====================================================================

// When somebody block you, then blockedBy will have the ID of the user who blocked you.
model FriendRelation {
  id           String       @id @default(uuid())
  user         User         @relation(name: "UserToFriendRelations", fields: [userId], references: [id])
  userId       String
  friend       User         @relation(name: "FriendToUserRelations", fields: [friendId], references: [id])
  friendId     String
  friendStatus FriendStatus
  createdAt    DateTime     @default(now())
  blockedBy    String?
}

enum FriendStatus {
  PENDING
  BLOCKED
  ACCEPTED
  DECLINED
}

// =====================================================================

model Channel {
  id String @id @default(uuid())

  channelName   String @unique
  channelType   Type
  // Relation to the creator user
  createdBy     String
  createdByUser User   @relation("createdChannels", fields: [createdBy], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  channelMembers ChannelRelation[]

  // channelMessages ChannelMessages[]
  Messages Messages[]
}

enum Type {
  PUBLIC
  PRIVATE
}

// =====================================================================

model ChannelRelation {
  id     String @id @default(uuid())
  userId String
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  channel   Channel @relation(fields: [channelId], references: [id])
  channelId String
}

// =====================================================================

model Messages {
  id Int @id @default(autoincrement())

  senderId String
  sender   User   @relation(name: "sentMessages", fields: [senderId], references: [id])

  receiverId String?
  reciever   User?   @relation(name: "recievedMessages", fields: [receiverId], references: [id])

  channelId String?
  channel   Channel? @relation(fields: [channelId], references: [id])

  content String

  createdAt DateTime @default(now())
}

// =====================================================================
