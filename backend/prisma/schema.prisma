generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ---------------------------------------------------------------------
model User {
  id           String         @id @default(uuid())
  login        String         @unique
  email        String         @unique
  name         String
  avatar       String?        @default("https://i.imgur.com/6VBx3io.png")
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  isOnline     Boolean        @default(true)
  score        Int            @default(0)
  // game         Game[]
  notification Notification[]

  // Relation to friends: Friend -> User
  userToFriend FriendRelation[] @relation(name: "UserToFriendRelations")
  // Opposit Relation to friends: Friend -> User
  friendToUser FriendRelation[] @relation(name: "FriendToUserRelations")

  // Channel Relations.
  channelRelation ChannelRelation[]
  channels        Channel[]         @relation("createdChannels")

  sentMessages     Messages[] @relation(name: "sentMessages")
  recievedMessages Messages[] @relation(name: "recievedMessages")
}

// ---------------------------------------------------------------------
// Think about it later
// ---------------------------------------------------------------------

// model Game {
//   id     String @id @default(uuid())
//   gameId Int

//   moves  Int
//   isLive Boolean @default(true)
//   result Result
//   points Int

//   startTime DateTime @default(now())
//   endTime   DateTime @updatedAt

// player1         String 
// player1Relation User  @relation(fields: [player1], references: [id])

// player2         String
// player2Relation User   @relation(fields: [player2], references: [id])
// }

// enum Result {
//   WIN
//   LOSE
//   DRAW
// }

// ---------------------------------------------------------------------
model Notification {
  id        String   @id @default(uuid())
  content   Content
  recivedAt DateTime @default(now())

  sender   User   @relation(fields: [senderId], references: [id])
  senderId String
}

enum Content {
  DirectMessage_Recieved
  ChannelInvite_Recieved
  GameInvite_Recieved
  FriendRequest_Recieved
}

// ---------------------------------------------------------------------

// When somebody block you, then blockedBy will have the ID of the user who blocked you.
model FriendRelation {
  id           String       @id @default(uuid())
  user         User         @relation(name: "UserToFriendRelations", fields: [userId], references: [id])
  userId       String
  friend       User         @relation(name: "FriendToUserRelations", fields: [friendId], references: [id])
  friendId     String
  friendStatus FriendStatus
  createdAt    DateTime     @default(now())
  blockedBy    String?
}

enum FriendStatus {
  PENDING
  BLOCKED
  ACCEPTED
  DECLINED
}

// ---------------------------------------------------------------------
model Channel {
  id String @id @default(uuid())

  channelName   String @unique
  channelType   Type
  // Relation to the creator user
  createdBy     String
  createdByUser User   @relation("createdChannels", fields: [createdBy], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  channelMembers ChannelRelation[]

  // channelMessages ChannelMessages[]
  Messages Messages[]
}

enum Type {
  PUBLIC
  PRIVATE
}

// ---------------------------------------------------------------------
model ChannelRelation {
  id     String @id @default(uuid())
  userId String
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Channel   Channel @relation(fields: [channelId], references: [id])
  channelId String
}

// ---------------------------------------------------------------------
model Messages {
  id Int @id @default(autoincrement())

  senderId String
  sender   User @relation(name: "sentMessages", fields: [senderId], references: [id])

  receiverId String?
  reciever   User? @relation(name: "recievedMessages", fields: [receiverId], references: [id])

  channelId String?
  channel   Channel? @relation(fields: [channelId], references: [id])

  content String

  createdAt DateTime @default(now())
}

// ---------------------------------------------------------------------